.. _nudomain:

nudomain
===========================================

.. class:: nudomain.NUDomain(bambou.nurest_object.NUMetaRESTObject,):

This object is used to manipulate domain state. A domain corresponds to a distributed Virtual Router and Switch.


Attributes
----------


- ``pat_enabled``: Indicates whether PAT is enabled for the subnets in this domain - ENABLED/DISABLED Possible values are ENABLED, DISABLED.

- ``ecmp_count``: Domain specific Equal-cost multi-path routing count, ECMPCount = 1 means no ECMP

- ``bgp_enabled``: Read only flag to display if BGP is enabled for this domain

- ``dhcp_behavior``: DHCPBehaviorType is an enum that indicates DHCP Behavior of VRS having VM's under this domain. Possible values are FLOOD, CONSUME, OVERLAY_RELAY, UNDERLAY_RELAY.

- ``dhcp_server_address``: when DHCPBehaviorType is RELAY, then DHCP Server IP Address needs to be set

- ``fip_ignore_default_route``: Determines whether the default Overlay route will be ignored or not when a VM has FIP so that it takes Underlay route.

- ``fip_underlay``: Boolean flag to indicate whether this is a Floating IP to underlay domain or not

- ``dpi``: determines whether or not Deep packet inspection is enabled

- ``grt_enabled``: Determines if GRT is enabled on this domain.

- ``evpnrt5_type``: Determines whether EVPN-RT5 are enabled on this domain.

- ``vxlanecmp_enabled``: Determines whether VXLAN-ECMP are enabled on this domain.

- ``label_id``: The label associated with the dVRS. This is a read only attribute

- ``back_haul_route_distinguisher``: Route distinguisher associated with the backhaul service in dVRS. If not provided, system generates this identifier automatically. Supported formats are: [2-byte ASN]:[4-byte value] or [4-byte ASN]:[2-byte value]

- ``back_haul_route_target``: Route target associated with the backhaul service in dVRS. If not provided, system generates this identifier automatically. Supported formats are: [2-byte ASN]:[4-byte value] or [4-byte ASN]:[2-byte value]

- ``back_haul_service_id``: The backhaul serviceID of the Virtual Router created in VSC and is associated with this object. This is auto-generated by VSD

- ``back_haul_vnid``: Current backhaul network's globally unique VXLAN network identifier

- ``maintenance_mode``: Enum that indicates if the Domain is accepting VM activation requests. Possible values are DISABLED, ENABLED.

- ``name`` (**Mandatory**): The name of the domain. Valid characters are  alphabets, numbers, space and hyphen( - ).

- ``last_updated_by``: ID of the user who last updated the object.

- ``last_updated_date``: Time stamp when this object was last updated.

- ``advertise_criteria``: Set this attribute to allow the spoke domain routes to be leaked into the hub domain.

- ``leaking_enabled``: Indicates if this domain is a leakable domain or not - boolean true/false

- ``fec_enabled``: Indicates if FEC (Forward Error Correction) is enabled on this Domain.

- ``secondary_dhcp_server_address``: when DHCPBehaviorType is RELAY, then DHCP Server IP Address needs to be set

- ``secondary_route_target``: Secondary route target associated with the dVRS. It is a parameter that is auto-managed by VSD. System generates this identifier automatically.

- ``template_id`` (**Mandatory**): The ID of the template that this domain was created from. This should be set when instantiating a domain

- ``permitted_action``: The permitted  action to USE/DEPLOY for the Domain Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, DEPLOY, .

- ``service_id``: The serviceID of the Virtual Router created in VSC and is associated with this object. This is auto-generated by VSD

- ``description``: A description string of the domain that is provided by the user

- ``aggregate_flows_enabled``: Flag to enable aggregate flows on this domain.

- ``aggregation_flow_type``: Indicates type of Aggregation Flow.

- ``dhcp_server_addresses``: when DHCPBehaviorType is RELAY, then DHCP Server IP Address needs to be set

- ``threat_intelligence_enabled``: Determines whether or not threat intelligence is enabled

- ``global_routing_enabled``: Indicates if this domain is a globally routable domain or not - boolean true/false

- ``flow_collection_enabled``: Determines whether or not flow collection is enabled.

- ``flow_count``: Maximum number of data flows allowed for a VPort.

- ``flow_limit_enabled``: Indicates if flow limit is enabled on this Domain. Possible values are ENABLED or DISABLED.

- ``embedded_metadata``: Metadata objects associated with this entity. This will contain a list of Metadata objects if the API request is made using the special flag to enable the embedded Metadata feature. Only a maximum of Metadata objects is returned based on the value set in the system configuration.

- ``import_route_target``: Route distinguisher associated with the dVRS. It is an optional parameter that can be provided by the user or auto-managed by VSD. System generates this identifier automatically, if not provided

- ``encryption``: Determines whether IPSEC is enabled Possible values are ENABLED, DISABLED.

- ``underlay_enabled``: Indicates whether UNDERLAY is enabled for the subnets in this domain

- ``enterprise_id``: Enterprise ID

- ``entity_scope``: Specify if scope of entity is Data center or Enterprise level

- ``local_as``: Local autonomous system for the domain

- ``policy_change_status``: None

- ``color``: The color encoded with a traffic engineering constraint such as minimum latency, hops, maximum bandwidth, etc. This is used for NFIX(Network Function Interconnect). Color is applicable only when the selected Tunnel Type is MPLSoUDP. Valid range is 1 - 4294967295. 0 for other Tunnel Types.

- ``domain_aggregation_enabled``: Indicates if this Domain Aggregation is enabled on this Domain.

- ``domain_id``: A unique 20-bitID editable however could be auto-generated by VSD.

- ``domain_vlanid``: None

- ``route_distinguisher``: Route distinguisher associated with the dVRS. If not provided, system generates this identifier automatically. Supported formats are: [2-byte ASN]:[4-byte value] or [4-byte ASN]:[2-byte value]

- ``route_target``: Route target associated with the dVRS. If not provided, system generates this identifier automatically. Supported formats are: [2-byte ASN]:[4-byte value] or [4-byte ASN]:[2-byte value]

- ``uplink_preference``: Indicates the preferencial path selection for network traffic in this domain - Default is Primary 1 and Secondary 2. Possible values are PRIMARY_SECONDARY, SECONDARY_PRIMARY, PRIMARY, SECONDARY, SYMMETRIC, .

- ``create_back_haul_subnet``: Determines if BackHaul Subnet should be created or not.

- ``creation_date``: Time stamp when this object was created.

- ``associated_bgp_profile_id``: None

- ``associated_idp_profile_id``: The associated IDP Profile ID

- ``associated_multicast_channel_map_id``: The ID of the Multi Cast Channel Map  this domain is associated with. This has to be set when  enableMultiCast is set to ENABLED

- ``associated_pat_mapper_id``: The ID of the PatMapper entity to which this l3-domain is associated to.

- ``associated_shared_pat_mapper_id``: The ID of the PatMapper entity to which this SharedNetworkResource is associated to.

- ``associated_underlay_id``: The ID of the Underlay entity to which this L3 Domain is associated.

- ``stretched``: Indicates whether this domain is streched,if so remote VM resolutions will be allowed

- ``multicast``: multicast is enum that indicates multicast policy on domain. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

- ``tunnel_type``: Default Domain Tunnel Type

- ``customer_id``: The customerID that is created in the VSC and identifies this dVRS. This is auto-generated by VSD

- ``owner``: Identifies the user that has created this object.

- ``export_route_target``: Route target associated with the dVRS. It is an optional parameterthat can be provided by the user or auto-managed by VSDSystem generates this identifier automatically, if not provided

- ``external_id``: External object ID. Used for integration with third party systems

- ``external_label``: External label given to Domain




Children
--------

================================================================================================================================================               ==========================================================================================
**class**                                                                                                                                                      **fetcher**

:ref:`nugateway.NUGateway<nugateway>`                                                                                                                            ``gateways`` 
:ref:`nutca.NUTCA<nutca>`                                                                                                                                        ``tcas`` 
:ref:`nuredirectiontarget.NURedirectionTarget<nuredirectiontarget>`                                                                                              ``redirection_targets`` 
:ref:`nudeploymentfailure.NUDeploymentFailure<nudeploymentfailure>`                                                                                              ``deployment_failures`` 
:ref:`nupermission.NUPermission<nupermission>`                                                                                                                   ``permissions`` 
:ref:`numetadata.NUMetadata<numetadata>`                                                                                                                         ``metadatas`` 
:ref:`nunetconfgateway.NUNetconfGateway<nunetconfgateway>`                                                                                                       ``netconf_gateways`` 
:ref:`nunetworkmacrogroup.NUNetworkMacroGroup<nunetworkmacrogroup>`                                                                                              ``network_macro_groups`` 
:ref:`nunetworkperformancebinding.NUNetworkPerformanceBinding<nunetworkperformancebinding>`                                                                      ``network_performance_bindings`` 
:ref:`nupgexpression.NUPGExpression<nupgexpression>`                                                                                                             ``pg_expressions`` 
:ref:`nuaggregateddomain.NUAggregatedDomain<nuaggregateddomain>`                                                                                                 ``aggregated_domains`` 
:ref:`nuegressaclentrytemplate.NUEgressACLEntryTemplate<nuegressaclentrytemplate>`                                                                               ``egress_acl_entry_templates`` 
:ref:`nuegressacltemplate.NUEgressACLTemplate<nuegressacltemplate>`                                                                                              ``egress_acl_templates`` 
:ref:`nuegressadvfwdtemplate.NUEgressAdvFwdTemplate<nuegressadvfwdtemplate>`                                                                                     ``egress_adv_fwd_templates`` 
:ref:`nuegressauditacltemplate.NUEgressAuditACLTemplate<nuegressauditacltemplate>`                                                                               ``egress_audit_acl_templates`` 
:ref:`nudomainfipacltemplate.NUDomainFIPAclTemplate<nudomainfipacltemplate>`                                                                                     ``domain_fip_acl_templates`` 
:ref:`nudhcpoption.NUDHCPOption<nudhcpoption>`                                                                                                                   ``dhcp_options`` 
:ref:`nudhcpv6option.NUDHCPv6Option<nudhcpv6option>`                                                                                                             ``dhcpv6_options`` 
:ref:`nulink.NULink<nulink>`                                                                                                                                     ``links`` 
:ref:`nufirewallacl.NUFirewallAcl<nufirewallacl>`                                                                                                                ``firewall_acls`` 
:ref:`numirrordestinationgroup.NUMirrorDestinationGroup<numirrordestinationgroup>`                                                                               ``mirror_destination_groups`` 
:ref:`nuvirtualfirewallpolicy.NUVirtualFirewallPolicy<nuvirtualfirewallpolicy>`                                                                                  ``virtual_firewall_policies`` 
:ref:`nuvirtualfirewallrule.NUVirtualFirewallRule<nuvirtualfirewallrule>`                                                                                        ``virtual_firewall_rules`` 
:ref:`nualarm.NUAlarm<nualarm>`                                                                                                                                  ``alarms`` 
:ref:`nufloatingip.NUFloatingIp<nufloatingip>`                                                                                                                   ``floating_ips`` 
:ref:`nuglobalmetadata.NUGlobalMetadata<nuglobalmetadata>`                                                                                                       ``global_metadatas`` 
:ref:`nuvm.NUVM<nuvm>`                                                                                                                                           ``vms`` 
:ref:`nuvminterface.NUVMInterface<nuvminterface>`                                                                                                                ``vm_interfaces`` 
:ref:`nuvnfdomainmapping.NUVNFDomainMapping<nuvnfdomainmapping>`                                                                                                 ``vnf_domain_mappings`` 
:ref:`nuingressaclentrytemplate.NUIngressACLEntryTemplate<nuingressaclentrytemplate>`                                                                            ``ingress_acl_entry_templates`` 
:ref:`nuingressacltemplate.NUIngressACLTemplate<nuingressacltemplate>`                                                                                           ``ingress_acl_templates`` 
:ref:`nuingressadvfwdtemplate.NUIngressAdvFwdTemplate<nuingressadvfwdtemplate>`                                                                                  ``ingress_adv_fwd_templates`` 
:ref:`nuingressauditaclentrytemplate.NUIngressAuditACLEntryTemplate<nuingressauditaclentrytemplate>`                                                             ``ingress_audit_acl_entry_templates`` 
:ref:`nuingressauditacltemplate.NUIngressAuditACLTemplate<nuingressauditacltemplate>`                                                                            ``ingress_audit_acl_templates`` 
:ref:`nujob.NUJob<nujob>`                                                                                                                                        ``jobs`` 
:ref:`nupolicygroup.NUPolicyGroup<nupolicygroup>`                                                                                                                ``policy_groups`` 
:ref:`nudomain.NUDomain<nudomain>`                                                                                                                               ``domains`` 
:ref:`nudomaintemplate.NUDomainTemplate<nudomaintemplate>`                                                                                                       ``domain_templates`` 
:ref:`nuzone.NUZone<nuzone>`                                                                                                                                     ``zones`` 
:ref:`nucontainer.NUContainer<nucontainer>`                                                                                                                      ``containers`` 
:ref:`nucontainerinterface.NUContainerInterface<nucontainerinterface>`                                                                                           ``container_interfaces`` 
:ref:`nuforwardingpathlist.NUForwardingPathList<nuforwardingpathlist>`                                                                                           ``forwarding_path_lists`` 
:ref:`nuqos.NUQOS<nuqos>`                                                                                                                                        ``qoss`` 
:ref:`nuhostinterface.NUHostInterface<nuhostinterface>`                                                                                                          ``host_interfaces`` 
:ref:`nuroutingpolicy.NURoutingPolicy<nuroutingpolicy>`                                                                                                          ``routing_policies`` 
:ref:`nuroutingpolicybinding.NURoutingPolicyBinding<nuroutingpolicybinding>`                                                                                     ``routing_policy_bindings`` 
:ref:`nuspatsourcespool.NUSPATSourcesPool<nuspatsourcespool>`                                                                                                    ``spat_sources_pools`` 
:ref:`nuuplinkrd.NUUplinkRD<nuuplinkrd>`                                                                                                                         ``uplink_rds`` 
:ref:`nuvpnconnection.NUVPNConnection<nuvpnconnection>`                                                                                                          ``vpn_connections`` 
:ref:`nuvport.NUVPort<nuvport>`                                                                                                                                  ``vports`` 
:ref:`nuapplication.NUApplication<nuapplication>`                                                                                                                ``applications`` 
:ref:`nuapplicationperformancemanagementbinding.NUApplicationperformancemanagementbinding<nuapplicationperformancemanagementbinding>`                            ``applicationperformancemanagementbindings`` 
:ref:`nubridgeinterface.NUBridgeInterface<nubridgeinterface>`                                                                                                    ``bridge_interfaces`` 
:ref:`nugroup.NUGroup<nugroup>`                                                                                                                                  ``groups`` 
:ref:`nunsgatewaysummary.NUNSGatewaySummary<nunsgatewaysummary>`                                                                                                 ``ns_gateway_summaries`` 
:ref:`nunsgroutingpolicybinding.NUNSGRoutingPolicyBinding<nunsgroutingpolicybinding>`                                                                            ``nsg_routing_policy_bindings`` 
:ref:`nuospfinstance.NUOSPFInstance<nuospfinstance>`                                                                                                             ``ospf_instances`` 
:ref:`nustaticroute.NUStaticRoute<nustaticroute>`                                                                                                                ``static_routes`` 
:ref:`nustatistics.NUStatistics<nustatistics>`                                                                                                                   ``statistics`` 
:ref:`nustatisticspolicy.NUStatisticsPolicy<nustatisticspolicy>`                                                                                                 ``statistics_policies`` 
:ref:`nusubnet.NUSubnet<nusubnet>`                                                                                                                               ``subnets`` 
:ref:`nueventlog.NUEventLog<nueventlog>`                                                                                                                         ``event_logs`` 
================================================================================================================================================               ==========================================================================================



Parents
--------


- :ref:`nuaggregateddomain.NUAggregatedDomain<nuaggregateddomain>`

- :ref:`nume.NUMe<nume>`

- :ref:`nufirewallacl.NUFirewallAcl<nufirewallacl>`

- :ref:`nudomain.NUDomain<nudomain>`

- :ref:`nunetconfgateway.NUNetconfGateway<nunetconfgateway>`

- :ref:`nugateway.NUGateway<nugateway>`

- :ref:`nudomaintemplate.NUDomainTemplate<nudomaintemplate>`

- :ref:`nuethernetsegmentgwgroup.NUEthernetSegmentGWGroup<nuethernetsegmentgwgroup>`

- :ref:`nuenterprise.NUEnterprise<nuenterprise>`


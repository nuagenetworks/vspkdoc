.. _nudomain:

nudomain
===========================================

.. class:: nudomain.NUDomain(bambou.nurest_object.NUMetaRESTObject,):

This object is used to manipulate domain state. A domain corresponds to a distributed Virtual Router and Switch.


Attributes
----------


- ``pat_enabled``: Indicates whether PAT is enabled for the subnets in this domain - ENABLED/DISABLED Possible values are INHERITED, ENABLED, DISABLED, .

- ``ecmp_count``: Domain specific Equal-cost multi-path routing count, ECMPCount = 1 means no ECMP

- ``bgp_enabled``: Read only flag to display if BGP is enabled for this domain

- ``dhcp_behavior``: DHCPBehaviorType is an enum that indicates DHCP Behavior of VRS having VM's under this domain. Possible values are FLOOD, CONSUME ,RELAY Possible values are CONSUME, FLOOD, RELAY, .

- ``dhcp_server_address``: when DHCPBehaviorType is RELAY, then DHCP Server IP Address needs to be set

- ``dpi``: determines whether or not Deep packet inspection is enabled

- ``label_id``: The label associated with the dVRS. This is a read only attribute

- ``back_haul_route_distinguisher``: Route distinguisher associated with the backhaul service in dVRS. If not provided, system generates this identifier automatically. Supported formats are: [2-byte ASN]:[4-byte value] or [4-byte ASN]:[2-byte value]

- ``back_haul_route_target``: Route target associated with the backhaul service in dVRS. If not provided, system generates this identifier automatically. Supported formats are: [2-byte ASN]:[4-byte value] or [4-byte ASN]:[2-byte value]

- ``back_haul_subnet_ip_address``: IP Address of the backhaul subnet 

- ``back_haul_subnet_mask``: Network mask of the backhaul subnet

- ``back_haul_vnid``: Current backhaul network's globally unique VXLAN network identifier

- ``maintenance_mode``: maintenanceMode is an enum that indicates if the Domain is accepting VM activation requests. Possible values are DISABLED, ENABLED and ENABLED_INHERITED Possible values are .

- ``name`` (**Mandatory**): The name of the domain. Valid characters are  alphabets, numbers, space and hyphen( - ).

- ``last_updated_by``: ID of the user who last updated the object.

- ``advertise_criteria``: Set this attribute to allow the spoke domain routes to be leaked into the hub domain.

- ``leaking_enabled``: Indicates if this domain is a leakable domain or not - boolean true/false

- ``secondary_dhcp_server_address``: when DHCPBehaviorType is RELAY, then DHCP Server IP Address needs to be set

- ``template_id`` (**Mandatory**): The ID of the template that this domain was created from. This should be set when instantiating a domain

- ``permitted_action``: The permitted  action to USE/DEPLOY for the Domain Possible values are USE, READ, ALL, INSTANTIATE, EXTEND, DEPLOY, .

- ``service_id``: The serviceID of the Virtual Router created in VSC and is associated with this object. This is auto-generated by VSD

- ``description``: A description string of the domain that is provided by the user

- ``dhcp_server_addresses``: when DHCPBehaviorType is RELAY, then DHCP Server IP Address needs to be set

- ``global_routing_enabled``: Indicates if this domain is a globally routable domain or not - boolean true/false

- ``import_route_target``: Route distinguisher associated with the dVRS. It is an optional parameter that can be provided by the user or auto-managed by VSD. System generates this identifier automatically, if not provided

- ``encryption``: Determines whether IPSEC is enabled Possible values are ENABLED, DISABLED, .

- ``underlay_enabled``: Indicates whether UNDERLAY is enabled for the subnets in this domain

- ``entity_scope``: Specify if scope of entity is Data center or Enterprise level

- ``policy_change_status``: None

- ``domain_id``: A unique 20-bitID editable however could be auto-generated by VSD.

- ``domain_vlanid``: None

- ``route_distinguisher``: Route distinguisher associated with the dVRS. If not provided, system generates this identifier automatically. Supported formats are: [2-byte ASN]:[4-byte value] or [4-byte ASN]:[2-byte value]

- ``route_target``: Route target associated with the dVRS. If not provided, system generates this identifier automatically. Supported formats are: [2-byte ASN]:[4-byte value] or [4-byte ASN]:[2-byte value]

- ``uplink_preference``: Indicates the preferencial path selection for network traffic in this domain - Default is Primary 1 and Secondary 2. Possible values are PRIMARY_SECONDARY, SECONDARY_PRIMARY, PRIMARY, SECONDARY, SYMMETRIC, .

- ``application_deployment_policy``: Application deployment policy.

- ``associated_bgp_profile_id``: None

- ``associated_multicast_channel_map_id``: The ID of the Multi Cast Channel Map  this domain is associated with. This has to be set when  enableMultiCast is set to ENABLED

- ``associated_pat_mapper_id``: The ID of the PatMapper entity to which this l3-domain is associated to.

- ``stretched``: Indicates whether this domain is streched,if so remote VM resolutions will be allowed

- ``multicast``: multicast is enum that indicates multicast policy on domain. Possible values are ENABLED ,DISABLED  and INHERITED Possible values are INHERITED, ENABLED, DISABLED, .

- ``tunnel_type``: Default Domain Tunnel Type

- ``customer_id``: The customerID that is created in the VSC and identifies this dVRS. This is auto-generated by VSD

- ``export_route_target``: Route target associated with the dVRS. It is an optional parameterthat can be provided by the user or auto-managed by VSDSystem generates this identifier automatically, if not provided

- ``external_id``: External object ID. Used for integration with third party systems




Children
--------

================================================================================================================================================               ==========================================================================================
**class**                                                                                                                                                      **fetcher**

:ref:`nutca.NUTCA<nutca>`                                                                                                                                        ``tcas`` 
:ref:`nuredirectiontarget.NURedirectionTarget<nuredirectiontarget>`                                                                                              ``redirection_targets`` 
:ref:`nupermission.NUPermission<nupermission>`                                                                                                                   ``permissions`` 
:ref:`numetadata.NUMetadata<numetadata>`                                                                                                                         ``metadatas`` 
:ref:`nunetworkperformancebinding.NUNetworkPerformanceBinding<nunetworkperformancebinding>`                                                                      ``network_performance_bindings`` 
:ref:`nuegressaclentrytemplate.NUEgressACLEntryTemplate<nuegressaclentrytemplate>`                                                                               ``egress_acl_entry_templates`` 
:ref:`nuegressacltemplate.NUEgressACLTemplate<nuegressacltemplate>`                                                                                              ``egress_acl_templates`` 
:ref:`nudomainfipacltemplate.NUDomainFIPAclTemplate<nudomainfipacltemplate>`                                                                                     ``domain_fip_acl_templates`` 
:ref:`nufloatingipacltemplate.NUFloatingIPACLTemplate<nufloatingipacltemplate>`                                                                                  ``floating_ipacl_templates`` 
:ref:`nudhcpoption.NUDHCPOption<nudhcpoption>`                                                                                                                   ``dhcp_options`` 
:ref:`nulink.NULink<nulink>`                                                                                                                                     ``links`` 
:ref:`nufirewallacl.NUFirewallAcl<nufirewallacl>`                                                                                                                ``firewall_acls`` 
:ref:`nufloatingip.NUFloatingIp<nufloatingip>`                                                                                                                   ``floating_ips`` 
:ref:`nuglobalmetadata.NUGlobalMetadata<nuglobalmetadata>`                                                                                                       ``global_metadatas`` 
:ref:`nuvm.NUVM<nuvm>`                                                                                                                                           ``vms`` 
:ref:`nuvminterface.NUVMInterface<nuvminterface>`                                                                                                                ``vm_interfaces`` 
:ref:`nuingressaclentrytemplate.NUIngressACLEntryTemplate<nuingressaclentrytemplate>`                                                                            ``ingress_acl_entry_templates`` 
:ref:`nuingressacltemplate.NUIngressACLTemplate<nuingressacltemplate>`                                                                                           ``ingress_acl_templates`` 
:ref:`nuingressadvfwdtemplate.NUIngressAdvFwdTemplate<nuingressadvfwdtemplate>`                                                                                  ``ingress_adv_fwd_templates`` 
:ref:`nuingressexternalservicetemplate.NUIngressExternalServiceTemplate<nuingressexternalservicetemplate>`                                                       ``ingress_external_service_templates`` 
:ref:`nujob.NUJob<nujob>`                                                                                                                                        ``jobs`` 
:ref:`nupolicygroup.NUPolicyGroup<nupolicygroup>`                                                                                                                ``policy_groups`` 
:ref:`nudomain.NUDomain<nudomain>`                                                                                                                               ``domains`` 
:ref:`nudomaintemplate.NUDomainTemplate<nudomaintemplate>`                                                                                                       ``domain_templates`` 
:ref:`nuzone.NUZone<nuzone>`                                                                                                                                     ``zones`` 
:ref:`nucontainer.NUContainer<nucontainer>`                                                                                                                      ``containers`` 
:ref:`nucontainerinterface.NUContainerInterface<nucontainerinterface>`                                                                                           ``container_interfaces`` 
:ref:`nuqos.NUQOS<nuqos>`                                                                                                                                        ``qoss`` 
:ref:`nuhostinterface.NUHostInterface<nuhostinterface>`                                                                                                          ``host_interfaces`` 
:ref:`nuroutingpolicy.NURoutingPolicy<nuroutingpolicy>`                                                                                                          ``routing_policies`` 
:ref:`nuuplinkrd.NUUplinkRD<nuuplinkrd>`                                                                                                                         ``uplink_rds`` 
:ref:`nuvpnconnection.NUVPNConnection<nuvpnconnection>`                                                                                                          ``vpn_connections`` 
:ref:`nuvport.NUVPort<nuvport>`                                                                                                                                  ``vports`` 
:ref:`nuapplicationperformancemanagementbinding.NUApplicationperformancemanagementbinding<nuapplicationperformancemanagementbinding>`                            ``applicationperformancemanagementbindings`` 
:ref:`nubridgeinterface.NUBridgeInterface<nubridgeinterface>`                                                                                                    ``bridge_interfaces`` 
:ref:`nugroup.NUGroup<nugroup>`                                                                                                                                  ``groups`` 
:ref:`nustaticroute.NUStaticRoute<nustaticroute>`                                                                                                                ``static_routes`` 
:ref:`nustatistics.NUStatistics<nustatistics>`                                                                                                                   ``statistics`` 
:ref:`nustatisticspolicy.NUStatisticsPolicy<nustatisticspolicy>`                                                                                                 ``statistics_policies`` 
:ref:`nusubnet.NUSubnet<nusubnet>`                                                                                                                               ``subnets`` 
:ref:`nueventlog.NUEventLog<nueventlog>`                                                                                                                         ``event_logs`` 
:ref:`nuexternalappservice.NUExternalAppService<nuexternalappservice>`                                                                                           ``external_app_services`` 
================================================================================================================================================               ==========================================================================================



Parents
--------


- :ref:`nufirewallacl.NUFirewallAcl<nufirewallacl>`

- :ref:`nudomain.NUDomain<nudomain>`

- :ref:`nume.NUMe<nume>`

- :ref:`nudomaintemplate.NUDomainTemplate<nudomaintemplate>`

- :ref:`nuenterprise.NUEnterprise<nuenterprise>`

